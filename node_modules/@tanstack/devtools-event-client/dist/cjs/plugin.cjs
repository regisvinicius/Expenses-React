"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
class EventClient {
  #pluginId;
  #eventTarget;
  #debug;
  #queuedEvents;
  #connected;
  #connectIntervalId;
  #connectEveryMs;
  #retryCount = 0;
  #maxRetries = 5;
  #onConnected = () => {
    this.debugLog("Connected to event bus");
    this.#connected = true;
    this.debugLog("Emitting queued events", this.#queuedEvents);
    this.#queuedEvents.forEach((event) => this.emitEventToBus(event));
    this.#queuedEvents = [];
    this.stopConnectLoop();
    this.#eventTarget().removeEventListener(
      "tanstack-connect-success",
      this.#onConnected
    );
  };
  #connectFunction = () => {
    this.#eventTarget().addEventListener(
      "tanstack-connect-success",
      this.#onConnected
    );
    if (this.#retryCount < this.#maxRetries) {
      this.#retryCount++;
      this.#eventTarget().dispatchEvent(new CustomEvent("tanstack-connect"));
      return;
    }
    this.#eventTarget().removeEventListener(
      "tanstack-connect",
      this.#connectFunction
    );
    this.debugLog("Max retries reached, giving up on connection");
    this.stopConnectLoop();
  };
  constructor({
    pluginId,
    debug = false
  }) {
    this.#pluginId = pluginId;
    this.#eventTarget = this.getGlobalTarget;
    this.#debug = debug;
    this.debugLog(" Initializing event subscription for plugin", this.#pluginId);
    this.#queuedEvents = [];
    this.#connected = false;
    this.#connectIntervalId = null;
    this.#connectEveryMs = 500;
    if (typeof CustomEvent !== "undefined") {
      this.#connectFunction();
      this.startConnectLoop();
    }
  }
  startConnectLoop() {
    if (this.#connectIntervalId !== null || this.#connected) return;
    this.debugLog(`Starting connect loop (every ${this.#connectEveryMs}ms)`);
    this.#connectIntervalId = setInterval(
      this.#connectFunction,
      this.#connectEveryMs
    );
  }
  stopConnectLoop() {
    if (this.#connectIntervalId === null) {
      return;
    }
    clearInterval(this.#connectIntervalId);
    this.#connectIntervalId = null;
    this.debugLog("Stopped connect loop");
  }
  debugLog(...args) {
    if (this.#debug) {
      console.log(`ðŸŒ´ [tanstack-devtools:${this.#pluginId}-plugin]`, ...args);
    }
  }
  getGlobalTarget() {
    if (typeof globalThis !== "undefined" && globalThis.__TANSTACK_EVENT_TARGET__) {
      this.debugLog("Using global event target");
      return globalThis.__TANSTACK_EVENT_TARGET__;
    }
    if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined") {
      this.debugLog("Using window as event target");
      return window;
    }
    const eventTarget = typeof EventTarget !== "undefined" ? new EventTarget() : void 0;
    if (typeof eventTarget === "undefined" || typeof eventTarget.addEventListener === "undefined") {
      this.debugLog(
        "No event mechanism available, running in non-web environment"
      );
      return {
        addEventListener: () => {
        },
        removeEventListener: () => {
        },
        dispatchEvent: () => false
      };
    }
    this.debugLog("Using new EventTarget as fallback");
    return eventTarget;
  }
  getPluginId() {
    return this.#pluginId;
  }
  emitEventToBus(event) {
    this.debugLog("Emitting event to client bus", event);
    this.#eventTarget().dispatchEvent(
      new CustomEvent("tanstack-dispatch-event", { detail: event })
    );
  }
  emit(eventSuffix, payload) {
    if (!this.#connected) {
      this.debugLog("Bus not available, will be pushed as soon as connected");
      return this.#queuedEvents.push({
        type: `${this.#pluginId}:${eventSuffix}`,
        payload,
        pluginId: this.#pluginId
      });
    }
    return this.emitEventToBus({
      type: `${this.#pluginId}:${eventSuffix}`,
      payload,
      pluginId: this.#pluginId
    });
  }
  on(eventSuffix, cb) {
    const eventName = `${this.#pluginId}:${eventSuffix}`;
    const handler = (e) => {
      this.debugLog("Received event from bus", e.detail);
      cb(e.detail);
    };
    this.#eventTarget().addEventListener(eventName, handler);
    this.debugLog("Registered event to bus", eventName);
    return () => {
      this.#eventTarget().removeEventListener(eventName, handler);
    };
  }
  onAll(cb) {
    const handler = (e) => {
      const event = e.detail;
      cb(event);
    };
    this.#eventTarget().addEventListener("tanstack-devtools-global", handler);
    return () => this.#eventTarget().removeEventListener(
      "tanstack-devtools-global",
      handler
    );
  }
  onAllPluginEvents(cb) {
    const handler = (e) => {
      const event = e.detail;
      if (this.#pluginId && event.pluginId !== this.#pluginId) {
        return;
      }
      cb(event);
    };
    this.#eventTarget().addEventListener("tanstack-devtools-global", handler);
    return () => this.#eventTarget().removeEventListener(
      "tanstack-devtools-global",
      handler
    );
  }
}
exports.EventClient = EventClient;
//# sourceMappingURL=plugin.cjs.map
