{"version":3,"file":"plugin.cjs","sources":["../../src/plugin.ts"],"sourcesContent":["interface TanStackDevtoolsEvent<TEventName extends string, TPayload = any> {\n  type: TEventName\n  payload: TPayload\n  pluginId?: string // Optional pluginId to filter events by plugin\n}\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __TANSTACK_EVENT_TARGET__: EventTarget | null\n}\n\ntype AllDevtoolsEvents<TEventMap extends Record<string, any>> = {\n  [Key in keyof TEventMap]: TanStackDevtoolsEvent<Key & string, TEventMap[Key]>\n}[keyof TEventMap]\n\nexport class EventClient<\n  TEventMap extends Record<string, any>,\n  TPluginId extends string = TEventMap extends Record<infer P, any>\n    ? P extends `${infer Id}:${string}`\n      ? Id\n      : never\n    : never,\n> {\n  #pluginId: TPluginId\n  #eventTarget: () => EventTarget\n  #debug: boolean\n  #queuedEvents: Array<TanStackDevtoolsEvent<string, any>>\n  #connected: boolean\n  #connectIntervalId: number | null\n  #connectEveryMs: number\n  #retryCount = 0\n  #maxRetries = 5\n  #onConnected = () => {\n    this.debugLog('Connected to event bus')\n    this.#connected = true\n    this.debugLog('Emitting queued events', this.#queuedEvents)\n    this.#queuedEvents.forEach((event) => this.emitEventToBus(event))\n    this.#queuedEvents = []\n    this.stopConnectLoop()\n    this.#eventTarget().removeEventListener(\n      'tanstack-connect-success',\n      this.#onConnected,\n    )\n  }\n  #connectFunction = () => {\n    this.#eventTarget().addEventListener(\n      'tanstack-connect-success',\n      this.#onConnected,\n    )\n    if (this.#retryCount < this.#maxRetries) {\n      this.#retryCount++\n      this.#eventTarget().dispatchEvent(new CustomEvent('tanstack-connect'))\n      return\n    }\n\n    this.#eventTarget().removeEventListener(\n      'tanstack-connect',\n      this.#connectFunction,\n    )\n    this.debugLog('Max retries reached, giving up on connection')\n    this.stopConnectLoop()\n  }\n\n  constructor({\n    pluginId,\n    debug = false,\n  }: {\n    pluginId: TPluginId\n    debug?: boolean\n  }) {\n    this.#pluginId = pluginId\n    this.#eventTarget = this.getGlobalTarget\n    this.#debug = debug\n    this.debugLog(' Initializing event subscription for plugin', this.#pluginId)\n    this.#queuedEvents = []\n    this.#connected = false\n    this.#connectIntervalId = null\n    this.#connectEveryMs = 500\n\n    if (typeof CustomEvent !== 'undefined') {\n      this.#connectFunction()\n      this.startConnectLoop()\n    }\n  }\n\n  private startConnectLoop() {\n    if (this.#connectIntervalId !== null || this.#connected) return\n    this.debugLog(`Starting connect loop (every ${this.#connectEveryMs}ms)`)\n\n    this.#connectIntervalId = setInterval(\n      this.#connectFunction,\n      this.#connectEveryMs,\n    ) as unknown as number\n  }\n\n  private stopConnectLoop() {\n    if (this.#connectIntervalId === null) {\n      return\n    }\n    clearInterval(this.#connectIntervalId)\n    this.#connectIntervalId = null\n    this.debugLog('Stopped connect loop')\n  }\n\n  private debugLog(...args: Array<any>) {\n    if (this.#debug) {\n      console.log(`ðŸŒ´ [tanstack-devtools:${this.#pluginId}-plugin]`, ...args)\n    }\n  }\n  private getGlobalTarget() {\n    // server one is the global event target\n    if (\n      typeof globalThis !== 'undefined' &&\n      globalThis.__TANSTACK_EVENT_TARGET__\n    ) {\n      this.debugLog('Using global event target')\n      return globalThis.__TANSTACK_EVENT_TARGET__\n    }\n    // CLient event target is the browser window object\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined'\n    ) {\n      this.debugLog('Using window as event target')\n\n      return window\n    }\n    // Protect against non-web environments like react-native\n    const eventTarget =\n      typeof EventTarget !== 'undefined' ? new EventTarget() : undefined\n\n    // For non-web environments like react-native\n    if (\n      typeof eventTarget === 'undefined' ||\n      typeof eventTarget.addEventListener === 'undefined'\n    ) {\n      this.debugLog(\n        'No event mechanism available, running in non-web environment',\n      )\n      return {\n        addEventListener: () => {},\n        removeEventListener: () => {},\n        dispatchEvent: () => false,\n      }\n    }\n\n    this.debugLog('Using new EventTarget as fallback')\n    return eventTarget\n  }\n\n  getPluginId() {\n    return this.#pluginId\n  }\n\n  private emitEventToBus(event: TanStackDevtoolsEvent<string, any>) {\n    this.debugLog('Emitting event to client bus', event)\n    this.#eventTarget().dispatchEvent(\n      new CustomEvent('tanstack-dispatch-event', { detail: event }),\n    )\n  }\n\n  emit<\n    TSuffix extends Extract<\n      keyof TEventMap,\n      `${TPluginId & string}:${string}`\n    > extends `${TPluginId & string}:${infer S}`\n      ? S\n      : never,\n  >(\n    eventSuffix: TSuffix,\n    payload: TEventMap[`${TPluginId & string}:${TSuffix}`],\n  ) {\n    // wait to connect to the bus\n    if (!this.#connected) {\n      this.debugLog('Bus not available, will be pushed as soon as connected')\n      return this.#queuedEvents.push({\n        type: `${this.#pluginId}:${eventSuffix}`,\n        payload,\n        pluginId: this.#pluginId,\n      })\n    }\n    // emit right now\n    return this.emitEventToBus({\n      type: `${this.#pluginId}:${eventSuffix}`,\n      payload,\n      pluginId: this.#pluginId,\n    })\n  }\n\n  on<\n    TSuffix extends Extract<\n      keyof TEventMap,\n      `${TPluginId & string}:${string}`\n    > extends `${TPluginId & string}:${infer S}`\n      ? S\n      : never,\n  >(\n    eventSuffix: TSuffix,\n    cb: (\n      event: TanStackDevtoolsEvent<\n        `${TPluginId & string}:${TSuffix}`,\n        TEventMap[`${TPluginId & string}:${TSuffix}`]\n      >,\n    ) => void,\n  ) {\n    const eventName = `${this.#pluginId}:${eventSuffix}` as const\n    const handler = (e: Event) => {\n      this.debugLog('Received event from bus', (e as CustomEvent).detail)\n      cb((e as CustomEvent).detail)\n    }\n    this.#eventTarget().addEventListener(eventName, handler)\n    this.debugLog('Registered event to bus', eventName)\n    return () => {\n      this.#eventTarget().removeEventListener(eventName, handler)\n    }\n  }\n\n  onAll(cb: (event: TanStackDevtoolsEvent<string, any>) => void) {\n    const handler = (e: Event) => {\n      const event = (e as CustomEvent).detail\n\n      cb(event)\n    }\n    this.#eventTarget().addEventListener('tanstack-devtools-global', handler)\n    return () =>\n      this.#eventTarget().removeEventListener(\n        'tanstack-devtools-global',\n        handler,\n      )\n  }\n  onAllPluginEvents(cb: (event: AllDevtoolsEvents<TEventMap>) => void) {\n    const handler = (e: Event) => {\n      const event = (e as CustomEvent).detail\n      if (this.#pluginId && event.pluginId !== this.#pluginId) {\n        return\n      }\n      cb(event)\n    }\n    this.#eventTarget().addEventListener('tanstack-devtools-global', handler)\n    return () =>\n      this.#eventTarget().removeEventListener(\n        'tanstack-devtools-global',\n        handler,\n      )\n  }\n}\n"],"names":[],"mappings":"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"}