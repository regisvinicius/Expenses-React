{"version":3,"file":"createFormHook.js","sources":["../../src/createFormHook.tsx"],"sourcesContent":["/* eslint-disable @eslint-react/no-context-provider */\nimport { createContext, useContext, useMemo } from 'react'\nimport { useForm } from './useForm'\nimport { useFieldGroup } from './useFieldGroup'\nimport type {\n  AnyFieldApi,\n  AnyFormApi,\n  BaseFormOptions,\n  DeepKeysOfType,\n  FieldApi,\n  FieldsMap,\n  FormAsyncValidateOrFn,\n  FormOptions,\n  FormValidateOrFn,\n} from '@tanstack/form-core'\nimport type { ComponentType, Context, JSX, PropsWithChildren } from 'react'\nimport type { FieldComponent } from './useField'\nimport type { ReactFormExtendedApi } from './useForm'\nimport type { AppFieldExtendedReactFieldGroupApi } from './useFieldGroup'\n\n// We should never hit the `null` case here\nconst fieldContext = createContext<AnyFieldApi>(null as never)\nconst formContext = createContext<AnyFormApi>(null as never)\n\n/**\n * TypeScript inferencing is weird.\n *\n * If you have:\n *\n * @example\n *\n * interface Args<T> {\n *     arg?: T\n * }\n *\n * function test<T>(arg?: Partial<Args<T>>): T {\n *     return 0 as any;\n * }\n *\n * const a = test({});\n *\n * Then `T` will default to `unknown`.\n *\n * However, if we change `test` to be:\n *\n * @example\n *\n * function test<T extends undefined>(arg?: Partial<Args<T>>): T;\n *\n * Then `T` becomes `undefined`.\n *\n * Here, we are checking if the passed type `T` extends `DefaultT` and **only**\n * `DefaultT`, as if that's the case we assume that inferencing has not occurred.\n */\ntype UnwrapOrAny<T> = [unknown] extends [T] ? any : T\ntype UnwrapDefaultOrAny<DefaultT, T> = [DefaultT] extends [T]\n  ? [T] extends [DefaultT]\n    ? any\n    : T\n  : T\n\nexport function createFormHookContexts() {\n  function useFieldContext<TData>() {\n    const field = useContext(fieldContext)\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!field) {\n      throw new Error(\n        '`fieldContext` only works when within a `fieldComponent` passed to `createFormHook`',\n      )\n    }\n\n    return field as FieldApi<\n      any,\n      string,\n      TData,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any\n    >\n  }\n\n  function useFormContext() {\n    const form = useContext(formContext)\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!form) {\n      throw new Error(\n        '`formContext` only works when within a `formComponent` passed to `createFormHook`',\n      )\n    }\n\n    return form as ReactFormExtendedApi<\n      // If you need access to the form data, you need to use `withForm` instead\n      Record<string, never>,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any\n    >\n  }\n\n  return { fieldContext, useFieldContext, useFormContext, formContext }\n}\n\ninterface CreateFormHookProps<\n  TFieldComponents extends Record<string, ComponentType<any>>,\n  TFormComponents extends Record<string, ComponentType<any>>,\n> {\n  fieldComponents: TFieldComponents\n  fieldContext: Context<AnyFieldApi>\n  formComponents: TFormComponents\n  formContext: Context<AnyFormApi>\n}\n\n/**\n * @private\n */\nexport type AppFieldExtendedReactFormApi<\n  TFormData,\n  TOnMount extends undefined | FormValidateOrFn<TFormData>,\n  TOnChange extends undefined | FormValidateOrFn<TFormData>,\n  TOnChangeAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnBlur extends undefined | FormValidateOrFn<TFormData>,\n  TOnBlurAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnSubmit extends undefined | FormValidateOrFn<TFormData>,\n  TOnSubmitAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnDynamic extends undefined | FormValidateOrFn<TFormData>,\n  TOnDynamicAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnServer extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TSubmitMeta,\n  TFieldComponents extends Record<string, ComponentType<any>>,\n  TFormComponents extends Record<string, ComponentType<any>>,\n> = ReactFormExtendedApi<\n  TFormData,\n  TOnMount,\n  TOnChange,\n  TOnChangeAsync,\n  TOnBlur,\n  TOnBlurAsync,\n  TOnSubmit,\n  TOnSubmitAsync,\n  TOnDynamic,\n  TOnDynamicAsync,\n  TOnServer,\n  TSubmitMeta\n> &\n  NoInfer<TFormComponents> & {\n    AppField: FieldComponent<\n      TFormData,\n      TOnMount,\n      TOnChange,\n      TOnChangeAsync,\n      TOnBlur,\n      TOnBlurAsync,\n      TOnSubmit,\n      TOnSubmitAsync,\n      TOnDynamic,\n      TOnDynamicAsync,\n      TOnServer,\n      TSubmitMeta,\n      NoInfer<TFieldComponents>\n    >\n    AppForm: ComponentType<PropsWithChildren>\n  }\n\nexport interface WithFormProps<\n  TFormData,\n  TOnMount extends undefined | FormValidateOrFn<TFormData>,\n  TOnChange extends undefined | FormValidateOrFn<TFormData>,\n  TOnChangeAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnBlur extends undefined | FormValidateOrFn<TFormData>,\n  TOnBlurAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnSubmit extends undefined | FormValidateOrFn<TFormData>,\n  TOnSubmitAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnDynamic extends undefined | FormValidateOrFn<TFormData>,\n  TOnDynamicAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TOnServer extends undefined | FormAsyncValidateOrFn<TFormData>,\n  TSubmitMeta,\n  TFieldComponents extends Record<string, ComponentType<any>>,\n  TFormComponents extends Record<string, ComponentType<any>>,\n  TRenderProps extends object = Record<string, never>,\n> extends FormOptions<\n    TFormData,\n    TOnMount,\n    TOnChange,\n    TOnChangeAsync,\n    TOnBlur,\n    TOnBlurAsync,\n    TOnSubmit,\n    TOnSubmitAsync,\n    TOnDynamic,\n    TOnDynamicAsync,\n    TOnServer,\n    TSubmitMeta\n  > {\n  // Optional, but adds props to the `render` function outside of `form`\n  props?: TRenderProps\n  render: (\n    props: PropsWithChildren<\n      NoInfer<TRenderProps> & {\n        form: AppFieldExtendedReactFormApi<\n          TFormData,\n          TOnMount,\n          TOnChange,\n          TOnChangeAsync,\n          TOnBlur,\n          TOnBlurAsync,\n          TOnSubmit,\n          TOnSubmitAsync,\n          TOnDynamic,\n          TOnDynamicAsync,\n          TOnServer,\n          TSubmitMeta,\n          TFieldComponents,\n          TFormComponents\n        >\n      }\n    >,\n  ) => JSX.Element\n}\n\nexport interface WithFieldGroupProps<\n  TFieldGroupData,\n  TFieldComponents extends Record<string, ComponentType<any>>,\n  TFormComponents extends Record<string, ComponentType<any>>,\n  TSubmitMeta,\n  TRenderProps extends Record<string, unknown> = Record<string, never>,\n> extends BaseFormOptions<TFieldGroupData, TSubmitMeta> {\n  // Optional, but adds props to the `render` function outside of `form`\n  props?: TRenderProps\n  render: (\n    props: PropsWithChildren<\n      NoInfer<TRenderProps> & {\n        group: AppFieldExtendedReactFieldGroupApi<\n          unknown,\n          TFieldGroupData,\n          string | FieldsMap<unknown, TFieldGroupData>,\n          undefined | FormValidateOrFn<unknown>,\n          undefined | FormValidateOrFn<unknown>,\n          undefined | FormAsyncValidateOrFn<unknown>,\n          undefined | FormValidateOrFn<unknown>,\n          undefined | FormAsyncValidateOrFn<unknown>,\n          undefined | FormValidateOrFn<unknown>,\n          undefined | FormAsyncValidateOrFn<unknown>,\n          undefined | FormValidateOrFn<unknown>,\n          undefined | FormAsyncValidateOrFn<unknown>,\n          undefined | FormAsyncValidateOrFn<unknown>,\n          // this types it as 'never' in the render prop. It should prevent any\n          // untyped meta passed to the handleSubmit by accident.\n          unknown extends TSubmitMeta ? never : TSubmitMeta,\n          TFieldComponents,\n          TFormComponents\n        >\n      }\n    >,\n  ) => JSX.Element\n}\n\nexport function createFormHook<\n  const TComponents extends Record<string, ComponentType<any>>,\n  const TFormComponents extends Record<string, ComponentType<any>>,\n>({\n  fieldComponents,\n  fieldContext,\n  formContext,\n  formComponents,\n}: CreateFormHookProps<TComponents, TFormComponents>) {\n  function useAppForm<\n    TFormData,\n    TOnMount extends undefined | FormValidateOrFn<TFormData>,\n    TOnChange extends undefined | FormValidateOrFn<TFormData>,\n    TOnChangeAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnBlur extends undefined | FormValidateOrFn<TFormData>,\n    TOnBlurAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnSubmit extends undefined | FormValidateOrFn<TFormData>,\n    TOnSubmitAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnDynamic extends undefined | FormValidateOrFn<TFormData>,\n    TOnDynamicAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnServer extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TSubmitMeta,\n  >(\n    props: FormOptions<\n      TFormData,\n      TOnMount,\n      TOnChange,\n      TOnChangeAsync,\n      TOnBlur,\n      TOnBlurAsync,\n      TOnSubmit,\n      TOnSubmitAsync,\n      TOnDynamic,\n      TOnDynamicAsync,\n      TOnServer,\n      TSubmitMeta\n    >,\n  ): AppFieldExtendedReactFormApi<\n    TFormData,\n    TOnMount,\n    TOnChange,\n    TOnChangeAsync,\n    TOnBlur,\n    TOnBlurAsync,\n    TOnSubmit,\n    TOnSubmitAsync,\n    TOnDynamic,\n    TOnDynamicAsync,\n    TOnServer,\n    TSubmitMeta,\n    TComponents,\n    TFormComponents\n  > {\n    const form = useForm(props)\n\n    const AppForm = useMemo(() => {\n      const AppForm = (({ children }) => {\n        return (\n          <formContext.Provider value={form}>{children}</formContext.Provider>\n        )\n      }) as ComponentType<PropsWithChildren>\n      return AppForm\n    }, [form])\n\n    const AppField = useMemo(() => {\n      const AppField = (({ children, ...props }) => {\n        return (\n          <form.Field {...props}>\n            {(field) => (\n              // eslint-disable-next-line @eslint-react/no-context-provider\n              <fieldContext.Provider value={field}>\n                {children(Object.assign(field, fieldComponents))}\n              </fieldContext.Provider>\n            )}\n          </form.Field>\n        )\n      }) as FieldComponent<\n        TFormData,\n        TOnMount,\n        TOnChange,\n        TOnChangeAsync,\n        TOnBlur,\n        TOnBlurAsync,\n        TOnSubmit,\n        TOnSubmitAsync,\n        TOnDynamic,\n        TOnDynamicAsync,\n        TOnServer,\n        TSubmitMeta,\n        TComponents\n      >\n      return AppField\n    }, [form])\n\n    const extendedForm = useMemo(() => {\n      return Object.assign(form, {\n        AppField,\n        AppForm,\n        ...formComponents,\n      })\n    }, [form, AppField, AppForm])\n\n    return extendedForm\n  }\n\n  function withForm<\n    TFormData,\n    TOnMount extends undefined | FormValidateOrFn<TFormData>,\n    TOnChange extends undefined | FormValidateOrFn<TFormData>,\n    TOnChangeAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnBlur extends undefined | FormValidateOrFn<TFormData>,\n    TOnBlurAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnSubmit extends undefined | FormValidateOrFn<TFormData>,\n    TOnSubmitAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnDynamic extends undefined | FormValidateOrFn<TFormData>,\n    TOnDynamicAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnServer extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TSubmitMeta,\n    TRenderProps extends object = {},\n  >({\n    render,\n    props,\n  }: WithFormProps<\n    TFormData,\n    TOnMount,\n    TOnChange,\n    TOnChangeAsync,\n    TOnBlur,\n    TOnBlurAsync,\n    TOnSubmit,\n    TOnSubmitAsync,\n    TOnDynamic,\n    TOnDynamicAsync,\n    TOnServer,\n    TSubmitMeta,\n    TComponents,\n    TFormComponents,\n    TRenderProps\n  >): WithFormProps<\n    UnwrapOrAny<TFormData>,\n    UnwrapDefaultOrAny<undefined | FormValidateOrFn<TFormData>, TOnMount>,\n    UnwrapDefaultOrAny<undefined | FormValidateOrFn<TFormData>, TOnChange>,\n    UnwrapDefaultOrAny<undefined | FormValidateOrFn<TFormData>, TOnChangeAsync>,\n    UnwrapDefaultOrAny<undefined | FormValidateOrFn<TFormData>, TOnBlur>,\n    UnwrapDefaultOrAny<undefined | FormValidateOrFn<TFormData>, TOnBlurAsync>,\n    UnwrapDefaultOrAny<undefined | FormValidateOrFn<TFormData>, TOnSubmit>,\n    UnwrapDefaultOrAny<undefined | FormValidateOrFn<TFormData>, TOnSubmitAsync>,\n    UnwrapDefaultOrAny<undefined | FormValidateOrFn<TFormData>, TOnDynamic>,\n    UnwrapDefaultOrAny<\n      undefined | FormValidateOrFn<TFormData>,\n      TOnDynamicAsync\n    >,\n    UnwrapDefaultOrAny<undefined | FormValidateOrFn<TFormData>, TOnServer>,\n    UnwrapOrAny<TSubmitMeta>,\n    UnwrapOrAny<TComponents>,\n    UnwrapOrAny<TFormComponents>,\n    UnwrapOrAny<TRenderProps>\n  >['render'] {\n    return (innerProps) => render({ ...props, ...innerProps })\n  }\n\n  function withFieldGroup<\n    TFieldGroupData,\n    TSubmitMeta,\n    TRenderProps extends Record<string, unknown> = {},\n  >({\n    render,\n    props,\n    defaultValues,\n  }: WithFieldGroupProps<\n    TFieldGroupData,\n    TComponents,\n    TFormComponents,\n    TSubmitMeta,\n    TRenderProps\n  >): <\n    TFormData,\n    TFields extends\n      | DeepKeysOfType<TFormData, TFieldGroupData | null | undefined>\n      | FieldsMap<TFormData, TFieldGroupData>,\n    TOnMount extends undefined | FormValidateOrFn<TFormData>,\n    TOnChange extends undefined | FormValidateOrFn<TFormData>,\n    TOnChangeAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnBlur extends undefined | FormValidateOrFn<TFormData>,\n    TOnBlurAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnSubmit extends undefined | FormValidateOrFn<TFormData>,\n    TOnSubmitAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnDynamic extends undefined | FormValidateOrFn<TFormData>,\n    TOnDynamicAsync extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TOnServer extends undefined | FormAsyncValidateOrFn<TFormData>,\n    TFormSubmitMeta,\n  >(\n    params: PropsWithChildren<\n      NoInfer<TRenderProps> & {\n        form:\n          | AppFieldExtendedReactFormApi<\n              TFormData,\n              TOnMount,\n              TOnChange,\n              TOnChangeAsync,\n              TOnBlur,\n              TOnBlurAsync,\n              TOnSubmit,\n              TOnSubmitAsync,\n              TOnDynamic,\n              TOnDynamicAsync,\n              TOnServer,\n              unknown extends TSubmitMeta ? TFormSubmitMeta : TSubmitMeta,\n              TComponents,\n              TFormComponents\n            >\n          | AppFieldExtendedReactFieldGroupApi<\n              // Since this only occurs if you nest it within other field groups, it can be more\n              // lenient with the types.\n              unknown,\n              TFormData,\n              string | FieldsMap<unknown, TFormData>,\n              any,\n              any,\n              any,\n              any,\n              any,\n              any,\n              any,\n              any,\n              any,\n              any,\n              unknown extends TSubmitMeta ? TFormSubmitMeta : TSubmitMeta,\n              TComponents,\n              TFormComponents\n            >\n        fields: TFields\n      }\n    >,\n  ) => JSX.Element {\n    return function Render(innerProps) {\n      const fieldGroupProps = useMemo(() => {\n        return {\n          form: innerProps.form,\n          fields: innerProps.fields,\n          defaultValues,\n          formComponents,\n        }\n      }, [innerProps.form, innerProps.fields])\n      const fieldGroupApi = useFieldGroup(fieldGroupProps as any)\n\n      return render({ ...props, ...innerProps, group: fieldGroupApi as any })\n    }\n  }\n\n  return {\n    useAppForm,\n    withForm,\n    withFieldGroup,\n  }\n}\n"],"names":["fieldContext","formContext","AppForm","AppField","props"],"mappings":";;;;AAqBA,MAAM,eAAe,cAA2B,IAAa;AAC7D,MAAM,cAAc,cAA0B,IAAa;AAuCpD,SAAS,yBAAyB;AACvC,WAAS,kBAAyB;AAChC,UAAM,QAAQ,WAAW,YAAY;AAGrC,QAAI,CAAC,OAAO;AACV,YAAM,IAAI;AAAA,QACR;AAAA,MAAA;AAAA,IAEJ;AAEA,WAAO;AAAA,EAyBT;AAEA,WAAS,iBAAiB;AACxB,UAAM,OAAO,WAAW,WAAW;AAGnC,QAAI,CAAC,MAAM;AACT,YAAM,IAAI;AAAA,QACR;AAAA,MAAA;AAAA,IAEJ;AAEA,WAAO;AAAA,EAeT;AAEA,SAAO,EAAE,cAAc,iBAAiB,gBAAgB,YAAA;AAC1D;AA4JO,SAAS,eAGd;AAAA,EACA;AAAA,EACA,cAAAA;AAAAA,EACA,aAAAC;AAAAA,EACA;AACF,GAAsD;AACpD,WAAS,WAcP,OA6BA;AACA,UAAM,OAAO,QAAQ,KAAK;AAE1B,UAAM,UAAU,QAAQ,MAAM;AAC5B,YAAMC,YAAW,CAAC,EAAE,eAAe;AACjC,mCACGD,aAAY,UAAZ,EAAqB,OAAO,MAAO,UAAS;AAAA,MAEjD;AACA,aAAOC;AAAAA,IACT,GAAG,CAAC,IAAI,CAAC;AAET,UAAM,WAAW,QAAQ,MAAM;AAC7B,YAAMC,aAAY,CAAC,EAAE,UAAU,GAAGC,aAAY;AAC5C,mCACG,KAAK,OAAL,EAAY,GAAGA,QACb,UAAA,CAAC;AAAA;AAAA,UAEA,oBAACJ,cAAa,UAAb,EAAsB,OAAO,OAC3B,UAAA,SAAS,OAAO,OAAO,OAAO,eAAe,CAAC,EAAA,CACjD;AAAA,WAEJ;AAAA,MAEJ;AAeA,aAAOG;AAAAA,IACT,GAAG,CAAC,IAAI,CAAC;AAET,UAAM,eAAe,QAAQ,MAAM;AACjC,aAAO,OAAO,OAAO,MAAM;AAAA,QACzB;AAAA,QACA;AAAA,QACA,GAAG;AAAA,MAAA,CACJ;AAAA,IACH,GAAG,CAAC,MAAM,UAAU,OAAO,CAAC;AAE5B,WAAO;AAAA,EACT;AAEA,WAAS,SAcP;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GAoCU;AACV,WAAO,CAAC,eAAe,OAAO,EAAE,GAAG,OAAO,GAAG,YAAY;AAAA,EAC3D;AAEA,WAAS,eAIP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GAkEe;AACf,WAAO,SAAS,OAAO,YAAY;AACjC,YAAM,kBAAkB,QAAQ,MAAM;AACpC,eAAO;AAAA,UACL,MAAM,WAAW;AAAA,UACjB,QAAQ,WAAW;AAAA,UACnB;AAAA,UACA;AAAA,QAAA;AAAA,MAEJ,GAAG,CAAC,WAAW,MAAM,WAAW,MAAM,CAAC;AACvC,YAAM,gBAAgB,cAAc,eAAsB;AAE1D,aAAO,OAAO,EAAE,GAAG,OAAO,GAAG,YAAY,OAAO,eAAsB;AAAA,IACxE;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}